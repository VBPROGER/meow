#!/bin/bash

function pass(){
	:
}
function meowecho(){
	echo "meow: ${1}"
}
function meowpass(){
	pass
}
function meowautoclear(){
	clear || meowpass
}

acedf="$1"
arg2="$2"
arg3="$3"
version="1.0.0"
MEOWPATH=~/.meow
ac="meow "

mkdir -p $MEOWPATH 2>/dev/null

if [[ "$acedf" == "" ]]; then
	while true; do
		read -p "" "meow"
		echo $meow
	done
elif [[ "$acedf" == "mew" ]]; then
	meowecho "processing..."
	to_download=$arg2
	meowecho "downloading..."
	mkdir -p "$MEOWPATH/${to_download}" 2>/dev/null
	meowecho "downloading \"main\" file..."
	/usr/bin/env curl "https://raw.githubusercontent.com/VBPROGER/meow/main/pkg/$to_download/main" > "${MEOWPATH}/${to_download}/main" 2>/dev/null
	/usr/bin/chmod +x "${MEOWPATH}/${to_download}"/main 2>/dev/null
	meowecho "downloading \"todownload\" file..."
	/usr/bin/env curl "https://raw.githubusercontent.com/VBPROGER/meow/main/pkg/$to_download/todownload" > "${MEOWPATH}/${to_download}"/todownload 2>/dev/null
	/usr/bin/chmod +x ${MEOWPATH}/${to_download}/todownload 2>/dev/null
	meowecho "checking required file(s)/folder(s) file..."
	for line in `cat ${MEOWPATH}/${to_download}/todownload`; do
		meowecho "downloading \"$line\" file by request..."
		/usr/bin/env curl "https://raw.githubusercontent.com/VBPROGER/meow/main/pkg/$to_download/$line" > "${MEOWPATH}/${to_download}/$line" 2>/dev/null
		/usr/bin/chmod +x "${MEOWPATH}/${to_download}/$line" 2>/dev/null
	done
elif [[ "$acedf" == "help" ]]; then
	meowecho "--- meow v${version} ---
welcome!

-..- CMD HELP -..-

${ac}help [*anyarguments]
	shows list of commands,
	info and more.
${ac}mew <name> [*anyarguments]
	download/install package by
	name using the \"mew\" method.
	downloading/installing folders
	is not allowed, if is even mentioned
	in the \"todownload\" file.
	if \"force\" argument is not
	equals \"null\" then meow
	will ignore ~~all~~ folder errors.
${ac}ulist [-s] || [--strip] [*anyarguments]
	get list of aviable packages.
	if -s is used, then it will
	not create newline at the end
${ac}del <name> [-s] || [--silent] [*anyarguments]
	will attempt to delete package
	with name <name>, if not installed,
	will show error (if -s || --silent
	argument is not used).
${ac}clean <-f> || <--force> [*anyarguments]
	delete all installed packages
	from the current machine.

-..- EXAMPLES FOR CMD -..-

${ac}mew mycoolpackage
# will download package with name 'mycoolpackage'.
${ac}ulist --strip
# will show all packages (no newline at the end)
${ac}del firstpkg
# will delete package with the name \"firstpkg\"
${ac}clean -f
# clean all packages (wipe)
"
elif [[ "$acedf" == "ulist" ]]; then
	for filename in "$MEOWPATH/*"; do
			printf "$filename\n"
		done
		if [[ ("$arg2" != "-s") || ("$arg2" != "") ]]; then
			echo ''
		fi
elif [[ "$acedf" == "del" ]]; then
	if [[ "$arg2" != '' ]]; then
		rm -rf "$MEOWPATH/$arg2" 2>/dev/null &>/dev/null
		if [[ "$arg3" == '-s' || "$arg3" == '--silent' ]]; then
			meowecho "successfully removed pkg with name '${arg2}'"
		fi
	else
		if [[ "$arg3" == '-s' || "$arg3" == '--silent' ]]; then
			meowecho "failed to remove pkg with name '${arg2}'"
		fi
	fi
elif [[ "$acedf" == "clean" ]]; then
	if [[ "$arg2" == '-f' || "$arg2" == '--force' ]]; then
		for filename in "$MEOWPATH/*"; do
			rm -rf "$filename"
		done
	fi
else
	meowecho "welcome to meow, v${version}."
fi